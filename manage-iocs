#!/bin/bash

PATH="${PATH}:/sbin:/bin:/usr/sbin:/usr/bin"

function die {
    echo "$1" >&2
    exit 1
}

# the command 'manage-iocs' is a symlink; find the source directory;   
SRCDIR="$(dirname "$(readlink -f "$0")")"

# variable configuration: IOCPATH, PIDDIR, LOGDIR, PROCSERV, SYSTEMDDIR
CONF="$SRCDIR/epics-softioc.conf"
if [ -f "$CONF" ]; then
    . "$CONF" 
else
    die "Aborted: missing $CONF"
fi

# function library: usage, vist, reportone, requireroot, installioc  
LIBRARY="$SRCDIR/library.sh"
[ -f "$LIBRARY" ] || die "Aborted: missing $LIBRARY"
. "$LIBRARY"

VERB=

while getopts hvx arg
do
    case $arg in
    v)    VERB=1;;
    x)    set -x;;
    h)    usage;;
    esac
done
shift $(($OPTIND - 1))

cmd="$1"
shift
[ -n "$VERB" ] && { echo "Searching in: $IOCPATH"; echo "Command: $cmd"; }


case "$cmd" in
help)
    usage
    ;;

report)
    visit reportone "$@" 

    # installioc() also checks duplicated ports, so the following seems unnecessary    
    if [ $# -eq 0 ]; then
        # report duplicated ports
        #ports="`visit reportone "" | awk '{print $7}' ORS=' ' | sort -n`"
        ports="`visit reportone "" | awk '{print $7}' | sort -n`"
        #echo "${ports[@]}"
        d_ports="$(printf '%s\n' "${ports[@]}" | awk '!($0 in seen){seen[$0];next} 1')"
        if [ -n "$d_ports" ]; then
            printf "\nWARNING: duplicated telnet ports are being used: "
            echo $d_ports
            printf "\tYou have to use a unique port for each IOC instance\n"
        fi 
    fi
    ;;

status)
    ls -1 $SYSTEMDDIR/softioc-*.service | while read ff
    do
        unitfile="`basename "$ff"`"
        # On Debian: Failed to retrieve unit: Access denied
        result="$(systemctl is-active $unitfile)" &> /dev/null
        # one has to use 'sudo ...' on old CentOS (7.8)
        if [ "$result" = "unknown" -o -z "$result" ]; then 
            die "Please type 'sudo manage-iocs status'"  
        fi
        printf "$unitfile\t\t"
        #systemctl -q is-active $unitfile
        #if [ $? -eq 0 ]; then
        if [ "$result" = "active" ]; then
            printf "Running"
        elif [ "$result" = "inactive" ]; then
            printf "Stopped"
        else
            printf "Strange status: $result. Please try 'sudo manage-iocs status'"
        fi
        # status of auto-start at boot
        if [ ! -h "$SYSTEMDDIR/multi-user.target.wants/$unitfile" ]; then
            printf ".  Not registered"
        fi
        printf "\n"

        # consistency checking in case something changed on the IOC  
        IOC=${unitfile#softioc-}
        IOC=${IOC%.service}
        IOCBASE="`findbase "$IOC"`"
        [ $? -ne 0 -o -z "$IOCBASE" ] && 
            { printf "Warning: no '$IOC' or '$IOC/config' in '$IOCPATH'; please\
 confirm the IOC setup and uninstall $IOC if needed\n\n"; continue; }
        . "$IOCBASE/$IOC/config"
        [ "$HOST" != "$(hostname -s)" -a "$HOST" != "$(hostname -f)" ] && 
            printf "Warning: HOST in $IOCBASE/$IOC/config is changed to $HOST;\
 please confirm the IOC setup and uninstall $IOC if needed\n\n"        
    done
    ;;

nextport)
    # Find the highest port in use and add one.
    LAST="`visit reportone "$1" | tail -n '+2' | awk '{print $7}' | sort -n | tail -n1`"
    #[ -n "$LAST" -a "$LAST" -ne 0 ] && expr "$LAST" '+' 1 || echo 4050
    # could "echo 4050" fail?
    [ -z "$LAST" ] && echo 4050 || expr "$LAST" '+' 1
    ;;

install)
    requireroot
    [ -z "$1" ] && die "Aborted: missing one argument -- an IOC name"
    installioc "$1"
    # ask to start the IOC if it is not running? NO, otherwise infinite loop
    ;;

uninstall)
    requireroot
    [ -z "$1" ] && die "Aborted: missing one argument -- an IOC name"
    systemctl -q is-active softioc-$1.service
    [ $? -eq 0 ] && die "Aborted: the IOC '$1' is running. Please stop it first"

    unitfile=$SYSTEMDDIR/softioc-$1.service
    if [ -f $unitfile ]; then
        rm -f $SYSTEMDDIR/softioc-$1.service || die "Failed to remove $unitfile"
        echo "$unitfile is removed successfully"
    else
        die "Aborted: $unitfile is already removed "
    fi

    # ask to disable auto-start IOC at boot if it is enabled
    if [ -h $SYSTEMDDIR/multi-user.target.wants/softioc-$1.service ]; then
        read -p "Do you want to disable auto-start '$1' at boot? Type 'yes' if you do. " answer
        [ "$answer" = "yes" ] && manage-iocs disable $1
    fi
    ;;

start)
    requireroot
    [ -z "$1" ] && die "Aborted: missing one argument -- an IOC name"
    systemctl -q is-active softioc-$1.service
    [ $? -eq 0 ] && die "The IOC '$1' is already running"
    echo "Starting the IOC '$1' ..."
    # update the unit file just in case the IOC's config file is changed
    manage-iocs install $1 2>&1 >/dev/null
    systemctl daemon-reload
    systemctl start softioc-$1.service
    sleep 1
    systemctl -q is-active softioc-$1.service
    if [ $? -eq 0 ]; then
        echo "The IOC '$1' has been started successfully"
    else
        die "Failed to start the IOC '$1'; type 'sudo journalctl -xe' for details."
    fi

    # ask to enable auto-start IOC at boot if it is not enabled
    if [ ! -h $SYSTEMDDIR/multi-user.target.wants/softioc-$1.service ]; then
        read -p "Do you want to enable auto-start '$1' at boot? Type 'yes' if you do. " answer
        [ "$answer" = "yes" ] && manage-iocs enable $1
    fi
    ;;

stop)
    requireroot
    [ -z "$1" ] && die "Aborted: missing one argument -- an IOC name"
    systemctl -q is-active softioc-$1.service
    [ $? -ne 0 ] && die "The IOC $1 is already stopped"
    echo "Stopping the IOC $1 ..."
    systemctl stop softioc-$1.service
    sleep 1
    systemctl -q is-active softioc-$1.service
    if [ $? -ne 0 ]; then
        echo "The IOC $1 has been stopped successfully"
    else
        die "Failed to stop the IOC $1; type 'sudo journalctl -xe' for details."
    fi
    ;;

restart)
    requireroot
    [ -z "$1" ] && die "Aborted: missing one argument -- an IOC name"
    systemctl -q is-active softioc-$1.service
    [ $? -eq 0 ] && manage-iocs stop $1
    manage-iocs start $1
    ;;

startall)
    requireroot
    ls -1 $SYSTEMDDIR/softioc-*.service | while read ff
    do
        unitfile="`basename "$ff"`"
        IOC=${unitfile#softioc-}
        IOC=${IOC%.service}
        manage-iocs start $IOC
    done
    ;;

stopall)
    requireroot
    ls -1 $SYSTEMDDIR/softioc-*.service | while read ff
    do
        unitfile="`basename "$ff"`"
        IOC=${unitfile#softioc-}
        IOC=${IOC%.service}
        manage-iocs stop $IOC
    done
    ;;

enable)
    #enable IOC auto-start at boot
    requireroot
    [ -z "$1" ] && die "Aborted: missing one argument -- an IOC name"
    if [ -h $SYSTEMDDIR/multi-user.target.wants/softioc-$1.service ]; then
        die "auto-start '$1' at boot is already enabled"
    fi

    systemctl enable softioc-$1 #&> /dev/null 
    if [ -h $SYSTEMDDIR/multi-user.target.wants/softioc-$1.service ]; then
        echo "auto-start the IOC '$1' at boot has been enabled successfully"
    fi
    ;;

disable)
    #disable IOC auto-start at boot
    requireroot
    [ -z "$1" ] && die "Aborted: missing one argument -- an IOC name"
    if [ ! -h $SYSTEMDDIR/multi-user.target.wants/softioc-$1.service ]; then
        die "auto-start '$1' at boot is already disabled"
    fi

    systemctl disable softioc-$1 
    if [ ! -h $SYSTEMDDIR/multi-user.target.wants/softioc-$1.service ]; then
        echo "auto-start the IOC '$1' at boot has been disabled successfully"
    fi
    ;;

list)
    visit echo "$1"
    ;;

*)
    [ "$cmd" ] && echo "Unknown command '$cmd'"
    usage
    exit 1
    ;;
esac
