#!/bin/bash

PATH="${PATH}:/sbin:/bin:/usr/sbin:/usr/bin"

function die {
    echo "$1" >&2
    exit 1
}

# the command 'manage-iocs' is a symlink; find the source directory;   
SRCDIR="$(dirname "$(readlink -f "$0")")"

# variable configuration: IOCPATH, PIDDIR, LOGDIR, PROCSERV, SYSTEMDDIR
CONF=$SRCDIR/epics-softioc.conf
[ -f "$CONF" ] || die "Aborted: missing $CONF"
. "$CONF"

# function library: usage, vist, reportone, requireroot, installioc  
LIBRARY=$SRCDIR/library.sh
[ -f "$LIBRARY" ] || die "Missing $LIBRARY"
. "$LIBRARY"

VERB=

while getopts hvx arg
do
    case $arg in
    v)    VERB=1;;
    x)    set -x;;
    h)    usage;;
    esac
done
shift $(($OPTIND - 1))

cmd="$1"
shift
[ -n "$VERB" ] && echo "Searching in: $IOCPATH" && echo "Command: $cmd"


case "$cmd" in
report)
    visit reportone "$@"
    ;;

list)
    visit echo "$1"
    ;;

status)
    ls -1 $SYSTEMDDIR/softioc-*.service | while read ff
    do
        unitfile="`basename "$ff"`"
        printf "$unitfile\t\t"
        systemctl -q is-active $unitfile
        if [ $? -eq 0 ]; then
            printf "Running"
        else
            printf "Stopped"
        fi
        printf "\n"
    done
    ;;

nextport)
    # Find the highest port in use and add one.
    LAST="`visit reportone "$1" | tail -n '+2' | awk '{print $7}' | sort -n | tail -n1`"
    if [ -n "$LAST" ] && [ "$LAST" -ne 0 ]
    then
        # print next port
        expr "$LAST" '+' 1
    else
        echo 4050
    fi
    ;;

install)
    requireroot
    [ -z "$1" ] && die "Aborted: missing one argument -- an IOC name"
    installioc "$1"
    ;;

uninstall)
    requireroot
    [ -z "$1" ] && die "Aborted: missing one argument -- an IOC name"
    unitfile=$SYSTEMDDIR/softioc-$1.service
    if [ -f $unitfile ]; then
        rm -f $SYSTEMDDIR/softioc-$1.service || die "Failed to remove $unitfile"
        echo "$unitfile is removed successfully"
    else
        die "Aborted: $unitfile does not exist"
    fi
    ;;

start)
    requireroot
    [ -z "$1" ] && die "Aborted: missing one argument -- an IOC name"
    systemctl -q is-active softioc-$1.service
    [ $? -eq 0 ] && die "The IOC $1 is already running"
    echo "Starting the IOC $1 ..."
    # update the unit file just in case the IOC's config file is changed
    manage-iocs install $1 2>&1 >/dev/null
    systemctl daemon-reload
    systemctl start softioc-$1.service
    sleep 1
    systemctl -q is-active softioc-$1.service
    if [ $? -eq 0 ]; then
        echo "The IOC $1 has been started successfully"
    else
        die "Failed to start the IOC $1"
    fi
    ;;

stop)
    requireroot
    [ -z "$1" ] && die "Aborted: missing one argument -- an IOC name"
    systemctl -q is-active softioc-$1.service
    [ $? -ne 0 ] && die "The IOC $1 is already stopped"
    echo "Stopping the IOC $1 ..."
    systemctl stop softioc-$1.service
    sleep 1
    systemctl -q is-active softioc-$1.service
    if [ $? -ne 0 ]; then
        echo "The IOC $1 has been stopped successfully"
    else
        die "Failed to stop the IOC $1"
    fi
    ;;

stopall)
    requireroot
    ls -1 $SYSTEMDDIR/softioc-*.service | while read ff
    do
        unitfile="`basename "$ff"`"
        IOC=${unitfile#softioc-}
        IOC=${IOC%.service}
        manage-iocs stop $IOC
    done
    ;;

startall)
    requireroot
    ls -1 $SYSTEMDDIR/softioc-*.service | while read ff
    do
        unitfile="`basename "$ff"`"
        IOC=${unitfile#softioc-}
        IOC=${IOC%.service}
        manage-iocs start $IOC
    done
    ;;

help)
    usage
    ;;
*)
    [ "$cmd" ] && echo "Unknown command '$cmd'"
    usage
    exit 1
    ;;
esac
